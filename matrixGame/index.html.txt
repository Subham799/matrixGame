<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pattern Memory Game</title>
    <!-- <link rel="stylesheet" href="style.css"> -->
</head>
<body>
    <style>/* style.css */
        body {
            font-family: Arial, sans-serif;
            text-align: center;
        }
        
        #game-container {
            display: grid;
            margin: 20px auto;
            width: fit-content;
            gap: 5px;
        }
        
        .grid-cell {
            width: 50px;
            height: 50px;
            background-color: #8b4513; /* Brown background */
            border: 1px solid #000;
        }
        
        .grid-cell.active {
            background-color: #00FFFF; /* Highlighted (cyan) */
        }
        
        button {
            padding: 10px 20px;
            margin-top: 20px;
            font-size: 16px;
        }
        </style>
    <h1>Pattern Memory Game</h1>
    <div id="game-container"></div>
    <button id="start-game">Start Game</button>

    <!-- <script src="script.js"></script>
      -->
    <script>// script.js

       // Game variables
let gridSize = 3;  // Starting grid size
let pattern = [];
let userPattern = [];
let allowInput = false; // Control when user can input

const gameContainer = document.getElementById('game-container');
const startButton = document.getElementById('start-game');

// Function to create the grid
function createGrid(size) {
    gameContainer.innerHTML = ''; // Clear the grid
    gameContainer.style.gridTemplateColumns = `repeat(${size}, 50px)`;

    for (let i = 0; i < size * size; i++) {
        const cell = document.createElement('div');
        cell.classList.add('grid-cell');
        cell.addEventListener('click', () => handleCellClick(i));
        gameContainer.appendChild(cell);
    }
}

// Function to generate a random pattern
function generatePattern(size) {
    pattern = [];
    const numCells = size * size;
    const patternLength = Math.floor(size * 1.5); // Increase pattern as grid grows

    while (pattern.length < patternLength) {
        const randomIndex = Math.floor(Math.random() * numCells);
        if (!pattern.includes(randomIndex)) {
            pattern.push(randomIndex);
        }
    }
}

// Function to display the pattern
function showPattern() {
    allowInput = false;
    userPattern = [];

    // Highlight all cells in the pattern at once
    pattern.forEach((index) => {
        const cell = document.querySelectorAll('.grid-cell')[index];
        cell.classList.add('active');
    });

    // Remove the highlight after a short delay
    setTimeout(() => {
        pattern.forEach((index) => {
            const cell = document.querySelectorAll('.grid-cell')[index];
            cell.classList.remove('active');
        });
        allowInput = true;  // Allow user to start clicking after the pattern is hidden
    }, 1000);  // Adjust the delay as needed
}

// Handle user cell clicks
function handleCellClick(index) {
    if (!allowInput) return;  // Prevent clicking when input is not allowed

    if (userPattern.includes(index)) return;  // Prevent clicking the same cell twice

    userPattern.push(index);
    const cell = document.querySelectorAll('.grid-cell')[index];
    cell.classList.add('active');

    // Check if the user has completed their input (same length as the pattern)
    if (userPattern.length === pattern.length) {
        checkPattern();
    }
}

// Check if user got the pattern right
function checkPattern() {
    // Check if the user pattern matches the generated pattern
    if (JSON.stringify(userPattern) === JSON.stringify(pattern)) {
        alert('Correct! Moving to next level.');
        gridSize++;  // Increase grid size for the next round
        startGame(); // Start the game again with increased grid size
    } else {
        alert('Incorrect! Try again.');
        resetGrid();  // Reset the grid without restarting the game
    }
}

// Function to reset the grid (clear user selections)
function resetGrid() {
    userPattern = []; // Clear the user input
    document.querySelectorAll('.grid-cell').forEach(cell => {
        cell.classList.remove('active');  // Remove any highlights
    });
}

// Start the game
function startGame() {
    createGrid(gridSize);
    generatePattern(gridSize);
    setTimeout(showPattern, 1000); // Show pattern after grid is ready
}

// Event listener for the start button
startButton.addEventListener('click', startGame);
</script>
</body>
</html>
